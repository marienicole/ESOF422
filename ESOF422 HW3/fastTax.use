model TaxSystem
/*
* The Tax System based on what Fast Enterprises told us... or what we can remember at this point.
*/

abstract class ReturnState
	operations
		accept(i: Integer, t:TaxReturn)
		begin
		end
		
		distribute()
		begin
		end
end

/* Class for the notRecieved State */
class notRecieved < ReturnState
	operations
		accept(i : Integer, t:TaxReturn) -- i is the wanted amount of return
		begin	
			declare highestReturn:Real;
			WriteLine('In state:notRecieved operation:accept:');
			highestReturn := t.salary/10; -- we decided that everyone gets taxed at 10%, no matter what.

           		if (i > 0 and i < highestReturn) then
             			t.taxState := t.processingState;
			end;

			if (i > highestReturn) then
				t.taxState := t.rejectedState;
			end;
		end

                distribute()
                begin
			WriteLine('ERROR: CANNOT DISTRIBUTE IF NOT PROCESSED.');
                end
end

/* Class for the processing state */
class processing < ReturnState
        operations
        	accept(i: Integer, t:TaxReturn)
        	begin
        		WriteLine('ERROR: ALREADY ACCEPTED, CANNOT SUBMIT TAXES TWICE.'); 
		end

                distribute()
                begin
			WriteLine('Distributed Tax Return. Thank you.');
                end
end

/* Class for the rejected state */
class rejected < ReturnState
        operations
	        accept(i: Integer, t:TaxReturn)
        	begin
			WriteLine('ERROR: CANNOT ACCEPT A REJECTED TAX RETURN');
        	end

                distribute()
                begin
			WriteLine('ERROR: CANNOT DISTRIBUTE UNPROCESSED RETURN.');
                end
end

/* Class for the distributed state */
class distributed < ReturnState
        operations
	        accept(i: Integer, t:TaxReturn)
	        begin
			WriteLine('ERROR: RETURN ALREADY PROCESSED.')
	        end

                distribute()
                begin
			WriteLine('ERROR: RETURN ALREADY DISTRIBUTED.')
                end
end
/* Tax Software */
class TaxSoftware
	attributes
		processingReturns:Set(TaxReturn)
		notRecievedState : ReturnState
                processingState : ReturnState
                rejectedState : ReturnState
                distributedState : ReturnState
	operations
	addReturns(t:TaxReturn)
	begin
		self.processingReturns := self.processingReturns->including(t)
	end
	
	initInstance()
	begin
		
		self.notRecievedState := new notRecieved;
                self.processingState := new processing;
                self.rejectedState := new rejected;
                self.distributedState := new distributed;
		for return in self.processingReturns do
			return.notRecievedState := self.notRecievedState;
			return.processingState := self.processingState;
			return.rejectedState := self.rejectedState;
			return.distributedState := self.distributedState;
		end;
	end

end
		
/* Class for a Tax Return. */
class TaxReturn
	attributes
		amount : Integer
		salary : Integer
		taxState : ReturnState
		notRecievedState : ReturnState
		processingState : ReturnState
		rejectedState : ReturnState
		distributedState : ReturnState

	operations
	initInstance(i: Integer, j: Integer)
	begin
		self.amount := i;
		self.salary := j;
		self.taxState := self.notRecievedState;
	end
	
	submit()
	begin
		self.taxState.accept(self.salary, self);
	end
	distribute()
	begin
		self.taxState.distribute();
	end
end


-- associations
association taxState between
	ReturnState[1]
	TaxReturn[*]
end
association taxSystem between
	TaxSoftware [1]
	TaxReturn [*]
end
--constraints


